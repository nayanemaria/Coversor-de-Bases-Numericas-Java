/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication1;

/**
 *
 * @author Daniel Teixeira
 */
public class Janela extends javax.swing.JDialog {

    /**
     * Creates new form NewJDialog
     */
    public Janela(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelEntrada = new javax.swing.JLabel();
        jLabelSaida = new javax.swing.JLabel();
        textEntrada = new javax.swing.JTextField();
        textSaida = new javax.swing.JTextField();
        boxSaida = new javax.swing.JComboBox<>();
        boxEntrada = new javax.swing.JComboBox<>();
        converter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Conversão de Bases");
        setResizable(false);

        jLabelEntrada.setText("Entrada");

        jLabelSaida.setText("Saída");

        textEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textEntradaActionPerformed(evt);
            }
        });

        textSaida.setEditable(false);

        boxSaida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Binário", "Decimal", "Hexadecimal" }));

        boxEntrada.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Binário", "Decimal", "Hexadecimal" }));
        boxEntrada.setSelectedIndex(1);

        converter.setText("Converter");
        converter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                converterActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication1/conversão.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textEntrada)
                                    .addComponent(boxEntrada, 0, 98, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(jLabelEntrada)))
                                .addGap(86, 86, 86)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textSaida, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(boxSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabelSaida)
                                            .addGap(32, 32, 32)))))
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(converter, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEntrada)
                    .addComponent(jLabelSaida))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(converter, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textEntradaActionPerformed
    }//GEN-LAST:event_textEntradaActionPerformed

    private void converterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_converterActionPerformed

        //BINÁRIO -> DECIMAL 
        if (boxEntrada.getSelectedIndex() == 0 && boxSaida.getSelectedIndex() == 1) {
            String entrada = textEntrada.getText();
            String invertida = new StringBuilder(entrada).reverse().toString();

            int somatorio = 0;
            
            for (int pos = 0; pos < invertida.length(); pos++) {
                char letra = invertida.charAt( pos );
                int numero = Character.getNumericValue(letra);  
                
                somatorio += numero * (int)(Math.pow(2, pos));
                
                System.out.println( somatorio );
            }
                       
            textSaida.setText( Integer.toString(somatorio) );
        }
        
        //BINÁRIO -> HEXADECIMAL 
        if (boxEntrada.getSelectedIndex() == 0 && boxSaida.getSelectedIndex() == 2) {
            
            String entrada = textEntrada.getText();  
            int c=0;
            long s1=0;
            String resultado="";
            int v_entrada = Integer.parseInt(entrada);
            while(v_entrada>0)
            {
              s1=s1+(long)(Math.pow(2,c)*(long)(v_entrada%10));
              v_entrada=(int) ((long)v_entrada/10);
              c++;
            }
            while(s1>0)
            {
              long j=s1%16;
              if(j==10)
              {
                 resultado ="A"+resultado;
              }
              else if(j==11)
              {
                 resultado="B"+resultado;
              }
              else if(j==12)
              {
                 resultado="C"+resultado;
              }
              else if(j==13)
              {
                 resultado="D"+resultado;
              }
              else if(j==14)
              {
                 resultado="E"+resultado;
              }
              else if(j==15)
              {
                 resultado="F"+resultado;
              }
              else
              {
                 resultado=j+resultado;
              }
              s1=s1/16;
           }
           System.out.println("O resultado é: "+resultado);

        }

        //DECIMAL -> BINÁRIO
        if (boxEntrada.getSelectedIndex() == 1 && boxSaida.getSelectedIndex() == 0) {
                
            String entrada = textEntrada.getText();            
            int v_entrada = Integer.parseInt(entrada); 
            int q = 0;
            int resto = 0;
            String v_saida = "";
            
            System.out.println(v_entrada);
            
            while( v_entrada >= 2  )
            {
                q = v_entrada / 2;
                resto = v_entrada % 2;
                
                v_entrada = v_entrada / 2;
                
                v_saida = v_saida + resto;
                
                System.out.println("Q: " + q);
                System.out.println("Resto: " + resto);
                System.out.println("PARCIAL: " + v_saida);
            }
            v_saida = v_saida + q;
            
            v_saida = new StringBuilder(v_saida).reverse().toString();
            
            System.out.println("FINAL: " + v_saida);
            textSaida.setText(v_saida);
        }

        //DECIMAL -> HEXADECIMAL 
        if (boxEntrada.getSelectedIndex() == 1 && boxSaida.getSelectedIndex() == 2) {
            
            String entrada = textEntrada.getText();            
            int hex = Integer.parseInt(entrada); 
            char hexchars[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};  
            int decimal = 0;
               while(decimal>0)  
                {  
                int rem = decimal%16;   
                  hex=hexchars[rem]+hex;   
                  decimal=decimal/16;  
                }
                System.out.println("O resultado é: "+hex);  
        }

        //HEXADECIMAL -> BINÁRIO
        if (boxEntrada.getSelectedIndex() == 2 && boxSaida.getSelectedIndex() == 0) {
            
            String entrada = textEntrada.getText();
            String vt_entrada=entrada;
            String p="";
            long n=0;
            int c=0;
            for(int i=vt_entrada.length()-1;i>=0;i--)
            {
                switch (vt_entrada.charAt(i)) {
                    case 'A':
                        n=n+(long)(Math.pow(16,c)*10);
                        c++;
                        break;
                    case 'B':
                        n=n+(long)(Math.pow(16,c)*11);
                        c++;
                        break;
                    case 'C':
                        n=n+(long)(Math.pow(16,c)*12);
                        c++;
                        break;
                    case 'D':
                        n=n+(long)(Math.pow(16,c)*13);
                        c++;
                        break;
                    case 'E':
                        n=n+(long)(Math.pow(16,c)*14);
                        c++;
                        break;
                    case 'F':
                        n=n+(long)(Math.pow(16,c)*15);
                        c++;
                        break;
                    default:
                        n=n+(long)Math.pow(16,c)*(long)vt_entrada.charAt(i);
                        c++;
                        break;
                }
         }
         String s1="",k="";
         if(n>1)
         {
         while(n>0)
         {
             if(n%2==0)
             {
                 k=k+"0";
                 n=n/2;
             }
             else
             {
                 k=k+"1";
                 n=n/2;
             }
         }
         for(int i=0;i<k.length();i++)
         {
             s1=k.charAt(i)+s1;
         }
         System.out.println("O resultado é: "+s1);
         }
         else
         {
             System.out.println("O resultado é: "+n);
         } 
        }

        //HEXADECIMAL -> DECIMAL
        if (boxEntrada.getSelectedIndex() == 2 && boxSaida.getSelectedIndex() == 1) {
            
            String entrada = textEntrada.getText();
            int size = entrada.length();
            int result = 0;

            for (int i = 0; i < entrada.length(); i++) {
                switch (entrada.charAt(i)) {
                    case '1':
                        result += (1 * Math.pow(16, --size));
                        break;
                    case '2':
                        result += (2 * Math.pow(16, --size));
                        break;
                    case '3':
                        result += (3 * Math.pow(16, --size));
                        break;
                    case '4':
                        result += (4 * Math.pow(16, --size));
                        break;
                    case '5':
                        result += (5 * Math.pow(16, --size));
                        break;
                    case '6':
                        result += (6 * Math.pow(16, --size));
                        break;
                    case '7':
                        result += (7 * Math.pow(16, --size));
                        break;
                    case '8':
                        result += (8 * Math.pow(16, --size));
                        break;
                    case '9':
                        result += (9 * Math.pow(16, --size));
                        break;
                    case 'A':
                        result += (10 * Math.pow(16, --size));
                        break;
                    case 'B':
                        result += (11 * Math.pow(16, --size));
                        break;
                    case 'C':
                        result += (12 * Math.pow(16, --size));
                        break;
                    case 'D':
                        result += (13 * Math.pow(16, --size));
                        break;
                    case 'E':
                        result += (14 * Math.pow(16, --size));
                        break;
                    case 'F':
                        result += (15 * Math.pow(16, --size));
                }
            }

            System.out.println("O resultado é: "+result);
        }

        textEntrada.setText("OK!");
        textSaida.setText("OK!");
    }//GEN-LAST:event_converterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Janela dialog = new Janela(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxEntrada;
    private javax.swing.JComboBox<String> boxSaida;
    private javax.swing.JButton converter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelEntrada;
    private javax.swing.JLabel jLabelSaida;
    private javax.swing.JTextField textEntrada;
    private javax.swing.JTextField textSaida;
    // End of variables declaration//GEN-END:variables

    private String padLeft(String entrada, int test) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
